arch/arm/plat-s3c/dev-hsmmc2.c:	.start = IRQ_EINT(6),
arch/arm/plat-s3c/dev-hsmmc2.c:	.end   = IRQ_EINT(6),
arch/arm/plat-s3c/pm.c:	unsigned long bit = 1L << IRQ_EINT_BIT(irqno);
arch/arm/plat-s3c/dev-hsmmc.c:		.start = IRQ_EINT(6),
arch/arm/plat-s3c/dev-hsmmc.c:		.end   = IRQ_EINT(6),
arch/arm/mach-s3c2410/mach-amlm5900.c:	ret = request_irq(IRQ_EINT9, &amlm5900_wake_interrupt,
arch/arm/mach-s3c2410/mach-amlm5900.c:		enable_irq_wake(IRQ_EINT9);
arch/arm/mach-s3c2410/include/mach/anubis-irq.h:#define IRQ_IDE0       IRQ_EINT2
arch/arm/mach-s3c2410/include/mach/anubis-irq.h:#define IRQ_IDE1       IRQ_EINT3
arch/arm/mach-s3c2410/include/mach/anubis-irq.h:#define IRQ_ASIX       IRQ_EINT1
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT0      S3C2410_IRQ(0)	    /* 16 */
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT1      S3C2410_IRQ(1)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT2      S3C2410_IRQ(2)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT3      S3C2410_IRQ(3)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT4t7    S3C2410_IRQ(4)	    /* 20 */
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT8t23   S3C2410_IRQ(5)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT4      S3C2410_IRQ(32)	   /* 48 */
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT5      S3C2410_IRQ(33)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT6      S3C2410_IRQ(34)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT7      S3C2410_IRQ(35)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT8      S3C2410_IRQ(36)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT9      S3C2410_IRQ(37)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT10     S3C2410_IRQ(38)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT11     S3C2410_IRQ(39)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT12     S3C2410_IRQ(40)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT13     S3C2410_IRQ(41)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT14     S3C2410_IRQ(42)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT15     S3C2410_IRQ(43)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT16     S3C2410_IRQ(44)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT17     S3C2410_IRQ(45)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT18     S3C2410_IRQ(46)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT19     S3C2410_IRQ(47)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT20     S3C2410_IRQ(48)	   /* 64 */
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT21     S3C2410_IRQ(49)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT22     S3C2410_IRQ(50)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT23     S3C2410_IRQ(51)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT_BIT(x)	((x) - IRQ_EINT4 + 4)
arch/arm/mach-s3c2410/include/mach/irqs.h:#define IRQ_EINT(x)    (((x) >= 4) ? (IRQ_EINT4 + (x) - 4) : (IRQ_EINT0 + (x)))
arch/arm/mach-s3c2410/include/mach/irqs.h:/* Our FIQs are routable from IRQ_EINT0 to IRQ_ADCPARENT */
arch/arm/mach-s3c2410/include/mach/irqs.h:#define FIQ_START		IRQ_EINT0
arch/arm/mach-s3c2410/include/mach/entry-macro.S:		adds	\irqnr, \irqnr, #IRQ_EINT0
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_USBOC      IRQ_EINT18
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_IDE0       IRQ_EINT16
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_IDE1       IRQ_EINT17
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_PCSERIAL1  IRQ_EINT15
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_PCSERIAL2  IRQ_EINT14
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_PCPARALLEL IRQ_EINT13
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_ASIX       IRQ_EINT11
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_DM9000     IRQ_EINT10
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_ISA	       IRQ_EINT9
arch/arm/mach-s3c2410/include/mach/bast-irq.h:#define IRQ_SMALERT    IRQ_EINT8
arch/arm/mach-s3c2410/include/mach/vr1000-irq.h:#define IRQ_USBOC	     IRQ_EINT19
arch/arm/mach-s3c2410/include/mach/vr1000-irq.h:#define IRQ_IDE0	     IRQ_EINT16
arch/arm/mach-s3c2410/include/mach/vr1000-irq.h:#define IRQ_IDE1	     IRQ_EINT17
arch/arm/mach-s3c2410/include/mach/vr1000-irq.h:#define IRQ_VR1000_SERIAL    IRQ_EINT12
arch/arm/mach-s3c2410/include/mach/vr1000-irq.h:#define IRQ_VR1000_DM9000A   IRQ_EINT10
arch/arm/mach-s3c2410/include/mach/vr1000-irq.h:#define IRQ_VR1000_DM9000N   IRQ_EINT9
arch/arm/mach-s3c2410/include/mach/vr1000-irq.h:#define IRQ_SMALERT	     IRQ_EINT8
arch/arm/mach-s3c2410/include/mach/tick.h:#define SRCPND_TIMER4 (1<<(IRQ_TIMER4 - IRQ_EINT0))
arch/arm/mach-s3c2410/mach-qt2410.c:		.start	= IRQ_EINT9,
arch/arm/mach-s3c2410/mach-qt2410.c:		.end	= IRQ_EINT9,
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT0t2	S3C2410_IRQ(0)	/* 16 */
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT0	IRQ_EINT0t2
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT3t6	S3C2410_IRQ(1)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT7t10	S3C2410_IRQ(2)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT11t14	S3C2410_IRQ(3)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT15t18	S3C2410_IRQ(4)	/* 20 */
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT00	S3C2410_IRQ(32)	/* 48 */
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT1	S3C2410_IRQ(33)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT2	S3C2410_IRQ(34)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT3	S3C2410_IRQ(35)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT4	S3C2410_IRQ(36)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT5	S3C2410_IRQ(37)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT6	S3C2410_IRQ(38)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT7	S3C2410_IRQ(39)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT8	S3C2410_IRQ(40)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT9	S3C2410_IRQ(41)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT10	S3C2410_IRQ(42)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT11	S3C2410_IRQ(43)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT12	S3C2410_IRQ(44)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT13	S3C2410_IRQ(45)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT14	S3C2410_IRQ(46)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT15	S3C2410_IRQ(47)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT16	S3C2410_IRQ(48)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT17	S3C2410_IRQ(49)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT18	S3C2410_IRQ(50)
arch/arm/mach-s3c24a0/include/mach/irqs.h:#define IRQ_EINT_BIT(x) ((x) - IRQ_EINT00)
arch/arm/plat-s3c64xx-5700/devs.c:		.start = IRQ_EINT(10),
arch/arm/plat-s3c64xx-5700/devs.c:		.end   = IRQ_EINT(10),
arch/arm/plat-s3c64xx-5700/devs.c:		.irq            = IRQ_EINT(17),
arch/arm/plat-s3c64xx-5700/gpiolib.c: * M	6	4Bit	No	IRQ_EINT
arch/arm/plat-s3c64xx-5700/gpiolib.c: * N	16	2Bit	No	IRQ_EINT
arch/arm/plat-s3c64xx-5700/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPIO_N_START);
arch/arm/plat-s3c64xx-5700/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPL(8) + 16);
arch/arm/plat-s3c64xx-5700/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPM(0) + 23);
arch/arm/plat-s3c64xx-5700/gpiolib.c:	if (irq >= IRQ_EINT(0) && irq <= IRQ_EINT(15))
arch/arm/plat-s3c64xx-5700/gpiolib.c:		return S3C64XX_GPN(irq - IRQ_EINT(0));
arch/arm/plat-s3c64xx-5700/gpiolib.c:	else if (irq >= IRQ_EINT(16) && irq <= IRQ_EINT(22))
arch/arm/plat-s3c64xx-5700/gpiolib.c:		return S3C64XX_GPL(irq - IRQ_EINT(16) + 8);
arch/arm/plat-s3c64xx-5700/gpiolib.c:	else if (irq >= IRQ_EINT(23) && irq <= IRQ_EINT(27))
arch/arm/plat-s3c64xx-5700/gpiolib.c:		return S3C64XX_GPM(irq - IRQ_EINT(23));
arch/arm/plat-s3c64xx-5700/irq-eint.c: * S3C64XX - Interrupt handling for IRQ_EINT(x)
arch/arm/plat-s3c64xx-5700/irq-eint.c:#define eint_offset(irq)	((irq) - IRQ_EINT(0))
arch/arm/plat-s3c64xx-5700/irq-eint.c: * from IRQ_EINT(0) to IRQ_EINT(27). It is designed to be inlined into
arch/arm/plat-s3c64xx-5700/irq-eint.c:	for (irq = IRQ_EINT(start); irq <= IRQ_EINT(end); irq++) {
arch/arm/plat-s3c64xx-5700/irq-eint.c:	for (irq = IRQ_EINT(0); irq <= IRQ_EINT(27); irq++) {
arch/arm/plat-s3c64xx-5700/irq-eint.c:	set_irq_chained_handler(IRQ_EINT0_3, s3c_irq_demux_eint0_3);
arch/arm/plat-s3c64xx-5700/irq-eint.c:	set_irq_chained_handler(IRQ_EINT4_11, s3c_irq_demux_eint4_11);
arch/arm/plat-s3c64xx-5700/irq-eint.c:	set_irq_chained_handler(IRQ_EINT12_19, s3c_irq_demux_eint12_19);
arch/arm/plat-s3c64xx-5700/irq-eint.c:	set_irq_chained_handler(IRQ_EINT20_27, s3c_irq_demux_eint20_27);
arch/arm/plat-s3c64xx-5700/irq.c:	for (irqno = IRQ_EINT0_3; irqno <= IRQ_LCD_SYSTEM; irqno++) {
arch/arm/plat-s3c64xx-5700/irq.c:	for (irqno = IRQ_EINT12_19; irqno <= IRQ_ADC; irqno++) {
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT0_3		S3C64XX_IRQ_VIC0(0)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT4_11		S3C64XX_IRQ_VIC0(1)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT12_19		S3C64XX_IRQ_VIC1(0)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT20_27		S3C64XX_IRQ_VIC1(1)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUPS		S3C64XX_IRQ_VIC1(21)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:/* Since the IRQ_EINT(x) are a linear mapping on current s3c64xx series
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h: * we just defined them as an IRQ_EINT(x) macro from S3C_IRQ_EINT_BASE
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define S3C_IRQ_EINT_BASE	S3C_IRQ(64+5)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define S3C_EINT(x)		((x) + S3C_IRQ_EINT_BASE)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT(x)		S3C_EINT(x)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:/* Next the external interrupt groups. These are similar to the IRQ_EINT(x)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h: * The IRQ_EINT(x) can be thought of as 'group 0' of the available GPIO
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h: * Use IRQ_EINT_GROUP(group, offset) to get the number for use in the
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP1_NR	(15)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP2_NR	(8)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP3_NR	(5)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP4_NR	(14)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP5_NR	(7)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP6_NR	(10)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP7_NR	(16)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP8_NR	(15)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP9_NR	(9)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP_BASE	S3C_EINT(28)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP1_BASE	(IRQ_EINT_GROUP_BASE + 0x00)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP2_BASE	(IRQ_EINT_GROUP1_BASE + IRQ_EINT_GROUP1_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP3_BASE	(IRQ_EINT_GROUP2_BASE + IRQ_EINT_GROUP2_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP4_BASE	(IRQ_EINT_GROUP3_BASE + IRQ_EINT_GROUP3_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP5_BASE	(IRQ_EINT_GROUP4_BASE + IRQ_EINT_GROUP4_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP6_BASE	(IRQ_EINT_GROUP5_BASE + IRQ_EINT_GROUP5_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP7_BASE	(IRQ_EINT_GROUP6_BASE + IRQ_EINT_GROUP6_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP8_BASE	(IRQ_EINT_GROUP7_BASE + IRQ_EINT_GROUP7_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP9_BASE	(IRQ_EINT_GROUP8_BASE + IRQ_EINT_GROUP8_NR)
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define IRQ_EINT_GROUP(group, no)	(IRQ_EINT_GROUP##group##_BASE + (no))
arch/arm/plat-s3c64xx-5700/include/plat/irqs.h:#define NR_IRQS	(IRQ_EINT_GROUP9_BASE + IRQ_EINT_GROUP9_NR + 1)
arch/arm/mach-s3c2400/gpio.c:	return (pin - S3C2410_GPE(0)) + IRQ_EINT0;
arch/arm/mach-s3c6410-R880/mach-anw6410.c:		.start = IRQ_EINT(15),
arch/arm/mach-s3c6410-R880/mach-anw6410.c:		.end   = IRQ_EINT(15),
arch/arm/mach-s3c6410-R880/sec_headset.c:	printk("sec_headset_probe IRQ %d %d\n", hi->port.send_end.eint, IRQ_EINT(11));
arch/arm/mach-s3c6410-R880/sec_headset.c:	printk("sec_headset_probe xsecond IRQ %d %d\n", hi->port.send_end_second.eint, IRQ_EINT(21));
arch/arm/mach-s3c6410-R880/mach-infobowlq.c:			.eint		= IRQ_EINT(10), 
arch/arm/mach-s3c6410-R880/mach-infobowlq.c:			.eint		= IRQ_EINT(11), 
arch/arm/mach-s3c6410-R880/mach-infobowlq.c:			.eint		= IRQ_EINT(21), 
arch/arm/mach-s3c6410-R880/mach-infobowlq.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(20)
arch/arm/mach-s3c6410-R880/mach-infobowlq.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(8)
arch/arm/mach-s3c6410-R880/board-rfkill.c:#define IRQ_BT_HOST_WAKE      IRQ_EINT(22)
arch/arm/mach-clps711x/include/mach/irqs.h:#define IRQ_EINT1			5
arch/arm/mach-clps711x/include/mach/irqs.h:#define IRQ_EINT2			6
arch/arm/mach-clps711x/include/mach/irqs.h:#define IRQ_EINT3			7
arch/arm/plat-s3c64xx-R880/devs.c:		.start = IRQ_EINT(10),
arch/arm/plat-s3c64xx-R880/devs.c:		.end   = IRQ_EINT(10),
arch/arm/plat-s3c64xx-R880/devs.c:		.irq            = IRQ_EINT(17),
arch/arm/plat-s3c64xx-R880/gpiolib.c: * M	6	4Bit	No	IRQ_EINT
arch/arm/plat-s3c64xx-R880/gpiolib.c: * N	16	2Bit	No	IRQ_EINT
arch/arm/plat-s3c64xx-R880/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPIO_N_START);
arch/arm/plat-s3c64xx-R880/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPL(8) + 16);
arch/arm/plat-s3c64xx-R880/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPM(0) + 23);
arch/arm/plat-s3c64xx-R880/gpiolib.c:	if (irq >= IRQ_EINT(0) && irq <= IRQ_EINT(15))
arch/arm/plat-s3c64xx-R880/gpiolib.c:		return S3C64XX_GPN(irq - IRQ_EINT(0));
arch/arm/plat-s3c64xx-R880/gpiolib.c:	else if (irq >= IRQ_EINT(16) && irq <= IRQ_EINT(22))
arch/arm/plat-s3c64xx-R880/gpiolib.c:		return S3C64XX_GPL(irq - IRQ_EINT(16) + 8);
arch/arm/plat-s3c64xx-R880/gpiolib.c:	else if (irq >= IRQ_EINT(23) && irq <= IRQ_EINT(27))
arch/arm/plat-s3c64xx-R880/gpiolib.c:		return S3C64XX_GPM(irq - IRQ_EINT(23));
arch/arm/plat-s3c64xx-R880/irq-eint.c: * S3C64XX - Interrupt handling for IRQ_EINT(x)
arch/arm/plat-s3c64xx-R880/irq-eint.c:#define eint_offset(irq)	((irq) - IRQ_EINT(0))
arch/arm/plat-s3c64xx-R880/irq-eint.c: * from IRQ_EINT(0) to IRQ_EINT(27). It is designed to be inlined into
arch/arm/plat-s3c64xx-R880/irq-eint.c:	for (irq = IRQ_EINT(start); irq <= IRQ_EINT(end); irq++) {
arch/arm/plat-s3c64xx-R880/irq-eint.c:	for (irq = IRQ_EINT(0); irq <= IRQ_EINT(27); irq++) {
arch/arm/plat-s3c64xx-R880/irq-eint.c:	set_irq_chained_handler(IRQ_EINT0_3, s3c_irq_demux_eint0_3);
arch/arm/plat-s3c64xx-R880/irq-eint.c:	set_irq_chained_handler(IRQ_EINT4_11, s3c_irq_demux_eint4_11);
arch/arm/plat-s3c64xx-R880/irq-eint.c:	set_irq_chained_handler(IRQ_EINT12_19, s3c_irq_demux_eint12_19);
arch/arm/plat-s3c64xx-R880/irq-eint.c:	set_irq_chained_handler(IRQ_EINT20_27, s3c_irq_demux_eint20_27);
arch/arm/plat-s3c64xx-R880/irq.c:	for (irqno = IRQ_EINT0_3; irqno <= IRQ_LCD_SYSTEM; irqno++) {
arch/arm/plat-s3c64xx-R880/irq.c:	for (irqno = IRQ_EINT12_19; irqno <= IRQ_ADC; irqno++) {
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT0_3		S3C64XX_IRQ_VIC0(0)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT4_11		S3C64XX_IRQ_VIC0(1)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT12_19		S3C64XX_IRQ_VIC1(0)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT20_27		S3C64XX_IRQ_VIC1(1)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUPS		S3C64XX_IRQ_VIC1(21)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:/* Since the IRQ_EINT(x) are a linear mapping on current s3c64xx series
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h: * we just defined them as an IRQ_EINT(x) macro from S3C_IRQ_EINT_BASE
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define S3C_IRQ_EINT_BASE	S3C_IRQ(64+5)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define S3C_EINT(x)		((x) + S3C_IRQ_EINT_BASE)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT(x)		S3C_EINT(x)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:/* Next the external interrupt groups. These are similar to the IRQ_EINT(x)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h: * The IRQ_EINT(x) can be thought of as 'group 0' of the available GPIO
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h: * Use IRQ_EINT_GROUP(group, offset) to get the number for use in the
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP1_NR	(15)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP2_NR	(8)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP3_NR	(5)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP4_NR	(14)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP5_NR	(7)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP6_NR	(10)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP7_NR	(16)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP8_NR	(15)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP9_NR	(9)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP_BASE	S3C_EINT(28)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP1_BASE	(IRQ_EINT_GROUP_BASE + 0x00)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP2_BASE	(IRQ_EINT_GROUP1_BASE + IRQ_EINT_GROUP1_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP3_BASE	(IRQ_EINT_GROUP2_BASE + IRQ_EINT_GROUP2_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP4_BASE	(IRQ_EINT_GROUP3_BASE + IRQ_EINT_GROUP3_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP5_BASE	(IRQ_EINT_GROUP4_BASE + IRQ_EINT_GROUP4_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP6_BASE	(IRQ_EINT_GROUP5_BASE + IRQ_EINT_GROUP5_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP7_BASE	(IRQ_EINT_GROUP6_BASE + IRQ_EINT_GROUP6_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP8_BASE	(IRQ_EINT_GROUP7_BASE + IRQ_EINT_GROUP7_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP9_BASE	(IRQ_EINT_GROUP8_BASE + IRQ_EINT_GROUP8_NR)
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define IRQ_EINT_GROUP(group, no)	(IRQ_EINT_GROUP##group##_BASE + (no))
arch/arm/plat-s3c64xx-R880/include/plat/irqs.h:#define NR_IRQS	(IRQ_EINT_GROUP9_BASE + IRQ_EINT_GROUP9_NR + 1)
arch/arm/mach-s3c6410/mach-anw6410.c:		.start = IRQ_EINT(15),
arch/arm/mach-s3c6410/mach-anw6410.c:		.end   = IRQ_EINT(15),
arch/arm/mach-s3c6410/sec_headset.c:	printk("sec_headset_probe IRQ %d %d\n", hi->port.send_end.eint, IRQ_EINT(11));
arch/arm/mach-s3c6410/sec_headset.c:	printk("sec_headset_probe xsecond IRQ %d %d\n", hi->port.send_end_second.eint, IRQ_EINT(21));
arch/arm/mach-s3c6410/mach-infobowlq.c:			.eint		= IRQ_EINT(10), 
arch/arm/mach-s3c6410/mach-infobowlq.c:			.eint		= IRQ_EINT(11), 
arch/arm/mach-s3c6410/mach-infobowlq.c:			.eint		= IRQ_EINT(21), 
arch/arm/mach-s3c6410/mach-infobowlq.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(20)
arch/arm/mach-s3c6410/mach-infobowlq.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(8)
arch/arm/mach-s3c6410/board-rfkill.c:#define IRQ_BT_HOST_WAKE      IRQ_EINT(22)
arch/arm/mach-s3c6410-5700/mach-infobowlq-R880.c:			.eint		= IRQ_EINT(10), 
arch/arm/mach-s3c6410-5700/mach-infobowlq-R880.c:			.eint		= IRQ_EINT(11), 
arch/arm/mach-s3c6410-5700/mach-infobowlq-R880.c:			.eint		= IRQ_EINT(21), 
arch/arm/mach-s3c6410-5700/mach-infobowlq-R880.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(20)
arch/arm/mach-s3c6410-5700/mach-infobowlq-R880.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(8)
arch/arm/mach-s3c6410-5700/board-rfkill.c-R880:#define IRQ_BT_HOST_WAKE      IRQ_EINT(22)
arch/arm/mach-s3c6410-5700/mach-spica.c:			.eint		= IRQ_EINT(10), 
arch/arm/mach-s3c6410-5700/mach-spica.c:			.eint		= IRQ_EINT(11), 
arch/arm/mach-s3c6410-5700/mach-spica.c:			.eint		= IRQ_EINT(21), 
arch/arm/mach-s3c6410-5700/mach-spica.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(20)
arch/arm/mach-s3c6410-5700/mach-spica.c:    #define IRQ_TOUCH_INT 			IRQ_EINT(8)
arch/arm/mach-s3c6410-5700/board-rfkill.c:#define IRQ_BT_HOST_WAKE      IRQ_EINT(22)
arch/arm/mach-s3c6410-5700/mach-spica-HARALD.c:			.eint		= IRQ_EINT(10), 
arch/arm/mach-s3c6410-5700/mach-spica-HARALD.c:			.eint		= IRQ_EINT(11), 
arch/arm/plat-s3c64xx/devs.c:		.start = IRQ_EINT(10),
arch/arm/plat-s3c64xx/devs.c:		.end   = IRQ_EINT(10),
arch/arm/plat-s3c64xx/devs.c:		.irq            = IRQ_EINT(17),
arch/arm/plat-s3c64xx/gpiolib.c: * M	6	4Bit	No	IRQ_EINT
arch/arm/plat-s3c64xx/gpiolib.c: * N	16	2Bit	No	IRQ_EINT
arch/arm/plat-s3c64xx/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPIO_N_START);
arch/arm/plat-s3c64xx/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPL(8) + 16);
arch/arm/plat-s3c64xx/gpiolib.c:		return IRQ_EINT(gpio - S3C64XX_GPM(0) + 23);
arch/arm/plat-s3c64xx/gpiolib.c:	if (irq >= IRQ_EINT(0) && irq <= IRQ_EINT(15))
arch/arm/plat-s3c64xx/gpiolib.c:		return S3C64XX_GPN(irq - IRQ_EINT(0));
arch/arm/plat-s3c64xx/gpiolib.c:	else if (irq >= IRQ_EINT(16) && irq <= IRQ_EINT(22))
arch/arm/plat-s3c64xx/gpiolib.c:		return S3C64XX_GPL(irq - IRQ_EINT(16) + 8);
arch/arm/plat-s3c64xx/gpiolib.c:	else if (irq >= IRQ_EINT(23) && irq <= IRQ_EINT(27))
arch/arm/plat-s3c64xx/gpiolib.c:		return S3C64XX_GPM(irq - IRQ_EINT(23));
arch/arm/plat-s3c64xx/irq-eint.c: * S3C64XX - Interrupt handling for IRQ_EINT(x)
arch/arm/plat-s3c64xx/irq-eint.c:#define eint_offset(irq)	((irq) - IRQ_EINT(0))
arch/arm/plat-s3c64xx/irq-eint.c: * from IRQ_EINT(0) to IRQ_EINT(27). It is designed to be inlined into
arch/arm/plat-s3c64xx/irq-eint.c:	for (irq = IRQ_EINT(start); irq <= IRQ_EINT(end); irq++) {
arch/arm/plat-s3c64xx/irq-eint.c:	for (irq = IRQ_EINT(0); irq <= IRQ_EINT(27); irq++) {
arch/arm/plat-s3c64xx/irq-eint.c:	set_irq_chained_handler(IRQ_EINT0_3, s3c_irq_demux_eint0_3);
arch/arm/plat-s3c64xx/irq-eint.c:	set_irq_chained_handler(IRQ_EINT4_11, s3c_irq_demux_eint4_11);
arch/arm/plat-s3c64xx/irq-eint.c:	set_irq_chained_handler(IRQ_EINT12_19, s3c_irq_demux_eint12_19);
arch/arm/plat-s3c64xx/irq-eint.c:	set_irq_chained_handler(IRQ_EINT20_27, s3c_irq_demux_eint20_27);
arch/arm/plat-s3c64xx/irq.c:	for (irqno = IRQ_EINT0_3; irqno <= IRQ_LCD_SYSTEM; irqno++) {
arch/arm/plat-s3c64xx/irq.c:	for (irqno = IRQ_EINT12_19; irqno <= IRQ_ADC; irqno++) {
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT0_3		S3C64XX_IRQ_VIC0(0)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT4_11		S3C64XX_IRQ_VIC0(1)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT12_19		S3C64XX_IRQ_VIC1(0)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT20_27		S3C64XX_IRQ_VIC1(1)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUPS		S3C64XX_IRQ_VIC1(21)
arch/arm/plat-s3c64xx/include/plat/irqs.h:/* Since the IRQ_EINT(x) are a linear mapping on current s3c64xx series
arch/arm/plat-s3c64xx/include/plat/irqs.h: * we just defined them as an IRQ_EINT(x) macro from S3C_IRQ_EINT_BASE
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define S3C_IRQ_EINT_BASE	S3C_IRQ(64+5)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define S3C_EINT(x)		((x) + S3C_IRQ_EINT_BASE)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT(x)		S3C_EINT(x)
arch/arm/plat-s3c64xx/include/plat/irqs.h:/* Next the external interrupt groups. These are similar to the IRQ_EINT(x)
arch/arm/plat-s3c64xx/include/plat/irqs.h: * The IRQ_EINT(x) can be thought of as 'group 0' of the available GPIO
arch/arm/plat-s3c64xx/include/plat/irqs.h: * Use IRQ_EINT_GROUP(group, offset) to get the number for use in the
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP1_NR	(15)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP2_NR	(8)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP3_NR	(5)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP4_NR	(14)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP5_NR	(7)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP6_NR	(10)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP7_NR	(16)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP8_NR	(15)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP9_NR	(9)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP_BASE	S3C_EINT(28)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP1_BASE	(IRQ_EINT_GROUP_BASE + 0x00)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP2_BASE	(IRQ_EINT_GROUP1_BASE + IRQ_EINT_GROUP1_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP3_BASE	(IRQ_EINT_GROUP2_BASE + IRQ_EINT_GROUP2_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP4_BASE	(IRQ_EINT_GROUP3_BASE + IRQ_EINT_GROUP3_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP5_BASE	(IRQ_EINT_GROUP4_BASE + IRQ_EINT_GROUP4_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP6_BASE	(IRQ_EINT_GROUP5_BASE + IRQ_EINT_GROUP5_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP7_BASE	(IRQ_EINT_GROUP6_BASE + IRQ_EINT_GROUP6_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP8_BASE	(IRQ_EINT_GROUP7_BASE + IRQ_EINT_GROUP7_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP9_BASE	(IRQ_EINT_GROUP8_BASE + IRQ_EINT_GROUP8_NR)
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define IRQ_EINT_GROUP(group, no)	(IRQ_EINT_GROUP##group##_BASE + (no))
arch/arm/plat-s3c64xx/include/plat/irqs.h:#define NR_IRQS	(IRQ_EINT_GROUP9_BASE + IRQ_EINT_GROUP9_NR + 1)
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_GSENSOR_1	IRQ_EINT0
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_MODEM		IRQ_EINT1
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_PIO_2		IRQ_EINT2	/* v2 + v3 + v4 only */
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_nJACK_INSERT	IRQ_EINT4
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_WLAN_GPIO1	IRQ_EINT5
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_AUX		IRQ_EINT6
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_nHOLD		IRQ_EINT7
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_PCF50633	IRQ_EINT9
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_3D		IRQ_EINT12
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02_IRQ_GSENSOR_2	IRQ_EINT16	/* v2 + v3 + v4 only */
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02v3_IRQ_nUSB_OC	IRQ_EINT17	/* v3 + v4 only */
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02v3_IRQ_nUSB_FLT	IRQ_EINT18	/* v3 + v4 only */
arch/arm/mach-s3c2442/include/mach/gta02.h:#define GTA02v3_IRQ_nGSM_OC	IRQ_EINT19	/* v3 + v4 only */
arch/arm/mach-s3c2443/irq.c:#define INTMSK_WDTAC97	(1UL << (IRQ_WDT - IRQ_EINT0))
arch/arm/mach-s3c2443/irq.c:#define INTMSK_LCD	(1UL << (IRQ_LCD - IRQ_EINT0))
arch/arm/mach-s3c2443/irq.c:#define INTMSK_DMA	(1UL << (IRQ_S3C2443_DMA - IRQ_EINT0))
arch/arm/mach-s3c2443/irq.c:#define INTMSK_UART3	(1UL << (IRQ_S3C2443_UART3 - IRQ_EINT0))
arch/arm/mach-s3c2443/irq.c:#define INTMSK_CAM	(1UL << (IRQ_CAM - IRQ_EINT0))
arch/arm/plat-s3c24xx/gpiolib.c:		return IRQ_EINT0 + offset;
arch/arm/plat-s3c24xx/gpiolib.c:		return IRQ_EINT4 + offset - 4;
arch/arm/plat-s3c24xx/gpiolib.c:	return IRQ_EINT8 + offset;
arch/arm/plat-s3c24xx/irq-pm.c:unsigned long s3c_irqwake_intallow	= 1L << (IRQ_RTC - IRQ_EINT0) | 0xfL;
arch/arm/plat-s3c24xx/irq-pm.c:	unsigned long irqbit = 1 << (irqno - IRQ_EINT0);
arch/arm/plat-s3c24xx/s3c244x-irq.c:#define INTMSK_CAM (1UL << (IRQ_CAM - IRQ_EINT0))
arch/arm/plat-s3c24xx/irq.c:	irqno -= IRQ_EINT0;
arch/arm/plat-s3c24xx/irq.c:	unsigned long bitval = 1UL << (irqno - IRQ_EINT0);
arch/arm/plat-s3c24xx/irq.c:	unsigned long bitval = 1UL << (irqno - IRQ_EINT0);
arch/arm/plat-s3c24xx/irq.c:	if (irqno != IRQ_TIMER4 && irqno != IRQ_EINT8t23)
arch/arm/plat-s3c24xx/irq.c:	irqno -= IRQ_EINT0;
arch/arm/plat-s3c24xx/irq.c:	if (irqno <= IRQ_EINT7 ) {
arch/arm/plat-s3c24xx/irq.c:			s3c_irq_ack(IRQ_EINT4t7);
arch/arm/plat-s3c24xx/irq.c:			s3c_irq_ack(IRQ_EINT8t23);
arch/arm/plat-s3c24xx/irq.c:	if ((irq >= IRQ_EINT0) && (irq <= IRQ_EINT3))
arch/arm/plat-s3c24xx/irq.c:		gpcon_offset = (irq - IRQ_EINT0) * 2;
arch/arm/plat-s3c24xx/irq.c:		extint_offset = (irq - IRQ_EINT0) * 4;
arch/arm/plat-s3c24xx/irq.c:	else if ((irq >= IRQ_EINT4) && (irq <= IRQ_EINT7))
arch/arm/plat-s3c24xx/irq.c:	else if ((irq >= IRQ_EINT8) && (irq <= IRQ_EINT15))
arch/arm/plat-s3c24xx/irq.c:		gpcon_offset = (irq - IRQ_EINT8) * 2;
arch/arm/plat-s3c24xx/irq.c:		extint_offset = (irq - IRQ_EINT8) * 4;
arch/arm/plat-s3c24xx/irq.c:	else if ((irq >= IRQ_EINT16) && (irq <= IRQ_EINT23))
arch/arm/plat-s3c24xx/irq.c:		gpcon_offset = (irq - IRQ_EINT8) * 2;
arch/arm/plat-s3c24xx/irq.c:		extint_offset = (irq - IRQ_EINT16) * 4;
arch/arm/plat-s3c24xx/irq.c:#define INTMSK_UART0	 (1UL << (IRQ_UART0 - IRQ_EINT0))
arch/arm/plat-s3c24xx/irq.c:#define INTMSK_UART1	 (1UL << (IRQ_UART1 - IRQ_EINT0))
arch/arm/plat-s3c24xx/irq.c:#define INTMSK_UART2	 (1UL << (IRQ_UART2 - IRQ_EINT0))
arch/arm/plat-s3c24xx/irq.c:#define INTMSK_ADCPARENT (1UL << (IRQ_ADCPARENT - IRQ_EINT0))
arch/arm/plat-s3c24xx/irq.c:		irq += (IRQ_EINT4 - 4);
arch/arm/plat-s3c24xx/irq.c:		irq += (IRQ_EINT4 - 4);
arch/arm/plat-s3c24xx/irq.c:	for (irqno = IRQ_EINT4t7; irqno <= IRQ_ADCPARENT; irqno++) {
arch/arm/plat-s3c24xx/irq.c:		case IRQ_EINT4t7:
arch/arm/plat-s3c24xx/irq.c:		case IRQ_EINT8t23:
arch/arm/plat-s3c24xx/irq.c:	set_irq_chained_handler(IRQ_EINT4t7, s3c_irq_demux_extint4t7);
arch/arm/plat-s3c24xx/irq.c:	set_irq_chained_handler(IRQ_EINT8t23, s3c_irq_demux_extint8);
arch/arm/plat-s3c24xx/irq.c:	for (irqno = IRQ_EINT0; irqno <= IRQ_EINT3; irqno++) {
arch/arm/plat-s3c24xx/irq.c:	for (irqno = IRQ_EINT4; irqno <= IRQ_EINT23; irqno++) {
arch/arm/plat-s3c24xx/include/plat/irq.h:#define EXTINT_OFF (IRQ_EINT4 - 4)
arch/arm/plat-s3c24xx/include/plat/pm-core.h:	s3c_pm_show_resume_irqs(IRQ_EINT0, __raw_readl(S3C2410_SRCPND),
arch/arm/plat-s3c24xx/include/plat/pm-core.h:	s3c_pm_show_resume_irqs(IRQ_EINT4-4, __raw_readl(S3C2410_EINTPEND),
arch/arm/plat-s3c24xx/gpio.c:		return (pin - S3C2410_GPF(0)) + IRQ_EINT0;
arch/arm/plat-s3c24xx/gpio.c:		return (pin - S3C2410_GPF(4)) + IRQ_EINT4;
arch/arm/plat-s3c24xx/gpio.c:	return (pin - S3C2410_GPG(0)) + IRQ_EINT8;
arch/arm/mach-s3c2412/mach-jive.c:		.irq	= IRQ_EINT14,
arch/arm/mach-s3c2412/irq.c:/* the s3c2412 changes the behaviour of IRQ_EINT0 through IRQ_EINT3 by
arch/arm/mach-s3c2412/irq.c:	unsigned long bitval = 1UL << (irqno - IRQ_EINT0);
arch/arm/mach-s3c2412/irq.c:	unsigned long bitval = 1UL << (irqno - IRQ_EINT0);
arch/arm/mach-s3c2412/irq.c:	unsigned long bitval = 1UL << (irqno - IRQ_EINT0);
arch/arm/mach-s3c2412/irq.c:	unsigned long bitval = 1UL << (irqno - IRQ_EINT0);
arch/arm/mach-s3c2412/irq.c:#define INTMSK_CFSDI	(1UL << (IRQ_S3C2412_CFSDI - IRQ_EINT0))
arch/arm/mach-s3c2412/irq.c:	for (irqno = IRQ_EINT0; irqno <= IRQ_EINT3; irqno++) {
arch/arm/mach-s3c2440/mach-mini2440.c:		.start = IRQ_EINT7,
arch/arm/mach-s3c2440/mach-mini2440.c:		.end   = IRQ_EINT7,
arch/arm/mach-s3c2440/mach-at2440evb.c:		.start = IRQ_EINT7,
arch/arm/mach-s3c2440/mach-at2440evb.c:		.end   = IRQ_EINT7,
arch/arm/mach-s3c2440/mach-anubis.c:		.start	= IRQ_EINT0,
arch/arm/mach-s3c2440/mach-anubis.c:		.end	= IRQ_EINT0,
arch/arm/mach-s3c2440/mach-anubis.c:		.irq	= IRQ_EINT20,
arch/arm/mach-s3c2440/mach-osiris.c:		.irq	= IRQ_EINT20,
arch/arm/mach-s3c2440/irq.c:#define INTMSK_WDT	 (1UL << (IRQ_WDT - IRQ_EINT0))
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT0		S5PC1XX_IRQ_VIC0(0)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT1		S5PC1XX_IRQ_VIC0(1)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT2		S5PC1XX_IRQ_VIC0(2)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT3		S5PC1XX_IRQ_VIC0(3)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT4		S5PC1XX_IRQ_VIC0(4)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT5		S5PC1XX_IRQ_VIC0(5)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT6		S5PC1XX_IRQ_VIC0(6)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT7		S5PC1XX_IRQ_VIC0(7)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT8		S5PC1XX_IRQ_VIC0(8)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT9		S5PC1XX_IRQ_VIC0(9)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT10		S5PC1XX_IRQ_VIC0(10)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT11		S5PC1XX_IRQ_VIC0(11)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT12		S5PC1XX_IRQ_VIC0(12)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT13		S5PC1XX_IRQ_VIC0(13)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT14		S5PC1XX_IRQ_VIC0(14)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT15		S5PC1XX_IRQ_VIC0(15)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT16_31		S5PC1XX_IRQ_VIC0(16)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define S3C_IRQ_EINT_BASE	(IRQ_SDMFIQ + 1)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define S3C_EINT(x)		((x) + S3C_IRQ_EINT_BASE)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define IRQ_EINT(x)		S3C_EINT(x)
arch/arm/plat-s5pc1xx/include/plat/irqs.h:#define NR_IRQS 		(IRQ_EINT(31)+1)
arch/m68k/include/asm/m5272sim.h:#define	MCF_IRQ_EINT1		65		/* External Interrupt 1 */
arch/m68k/include/asm/m5272sim.h:#define	MCF_IRQ_EINT2		66		/* External Interrupt 2 */
arch/m68k/include/asm/m5272sim.h:#define	MCF_IRQ_EINT3		67		/* External Interrupt 3 */
arch/m68k/include/asm/m5272sim.h:#define	MCF_IRQ_EINT4		68		/* External Interrupt 4 */
arch/m68k/include/asm/m5272sim.h:#define	MCF_IRQ_EINT5		90		/* External Interrupt 5 */
arch/m68k/include/asm/m5272sim.h:#define	MCF_IRQ_EINT6		91		/* External Interrupt 6 */
arch/m68knommu/platform/5272/intc.c:	/*MCF_IRQ_EINT1*/	{ .icr = MCFSIM_ICR1, .index = 28, .ack = 1, },
arch/m68knommu/platform/5272/intc.c:	/*MCF_IRQ_EINT2*/	{ .icr = MCFSIM_ICR1, .index = 24, .ack = 1, },
arch/m68knommu/platform/5272/intc.c:	/*MCF_IRQ_EINT3*/	{ .icr = MCFSIM_ICR1, .index = 20, .ack = 1, },
arch/m68knommu/platform/5272/intc.c:	/*MCF_IRQ_EINT4*/	{ .icr = MCFSIM_ICR1, .index = 16, .ack = 1, },
arch/m68knommu/platform/5272/intc.c:	/*MCF_IRQ_EINT5*/	{ .icr = MCFSIM_ICR4, .index = 24, .ack = 1, },
arch/m68knommu/platform/5272/intc.c:	/*MCF_IRQ_EINT6*/	{ .icr = MCFSIM_ICR4, .index = 20, .ack = 1, },
Documentation/arm/Samsung-S3C24XX/Suspend.txt:  an falling edge on IRQ_EINT0:
Documentation/arm/Samsung-S3C24XX/Suspend.txt:	request_irq(IRQ_EINT0, button_irq, IRQF_TRIGGER_FALLING,
Documentation/arm/Samsung-S3C24XX/Suspend.txt:	enable_irq_wake(IRQ_EINT0);
drivers/net/wireless/bcm4325/src/bcmsdio/sys/bcmsdh_sdmmc_linux.c:	dhd_wifi_sleep->host_wake_irq= IRQ_EINT(1);
drivers/sensor/optical/gp2a.h:#define IRQ_GP2A_INT IRQ_EINT(20)  /*s3c64xx int number */
drivers/sensor/accel/kxsd9_2042.c:#define IRQ_ACC_INT IRQ_EINT(3)
drivers/sensor/compass/ak8973b.c:#define IRQ_COMPASS_INT IRQ_EINT(2) /* EINT(2) */
drivers/usb/gadget/fsa9480_i2c.c:		set_irq_type(IRQ_EINT(9), IRQ_TYPE_EDGE_FALLING);
drivers/usb/gadget/fsa9480_i2c.c:		if (request_irq(IRQ_EINT(9), fsa9480_interrupt, IRQF_DISABLED, "FSA9480 Detected", NULL)) 
drivers/usb/gadget/fsa9480_i2c.c:			DEBUG_FSA9480("[FSA9480]fail to register IRQ[%d] for FSA9480 USB Switch \n", IRQ_EINT(9));
drivers/usb/gadget/fsa9480_i2c.h:#define IRQ_FSA9480_INTB	IRQ_EINT(9)
drivers/power/ORG/s3c6410_battery.h:#define IRQ_TA_CONNECTED_N	IRQ_EINT(19)
drivers/power/ORG/s3c6410_battery.h:#define IRQ_TA_CHG_N		IRQ_EINT(25)
drivers/power/s3c6410_battery.h:#define IRQ_TA_CONNECTED_N	IRQ_EINT(19)
drivers/power/s3c6410_battery.h:#define IRQ_TA_CHG_N		IRQ_EINT(25)
drivers/serial/max3100.c: .irq		= IRQ_EINT12,
drivers/input/mouse/opt_joy.h:#define IRQ_OJT_INT IRQ_EINT(27)
drivers/input/keyboard/5700/s3c-keypad-board.h:	{IRQ_EINT(5),  GPIO_POWER_N,      GPIO_POWER_N_AF,      KEYCODE_ENDCALL, 1},
drivers/input/keyboard/5700/s3c-keypad-board.h:	{IRQ_EINT(5),  GPIO_POWER_N,      GPIO_POWER_N_AF,      KEYCODE_ENDCALL, 1},
drivers/input/keyboard/5700/s3c-keypad-board.h:	{IRQ_EINT(17), GPIO_HOLD_KEY_N,   GPIO_HOLD_KEY_N_AF,   KEYCODE_HOLDKEY, 1},
drivers/input/keyboard/R880/s3c-keypad-board.h://struct s3c_keypad_slide slide_infobowlq = {IRQ_EINT(4), GPIO_HALL_SW, GPIO_HALL_SW_AF, 1};
drivers/input/keyboard/R880/s3c-keypad-board.h:struct s3c_keypad_slide slide_infobowlq = {IRQ_EINT(4), GPIO_HALL_SW, GPIO_HALL_SW_AF, 0};
drivers/input/keyboard/R880/s3c-keypad-board.h:	{IRQ_EINT(5),  GPIO_POWER_N     , GPIO_POWER_N_AF     , KEYCODE_ENDCALL, 1},
drivers/input/keyboard/s3c-keypad-board.h:	{IRQ_EINT(5),  GPIO_POWER_N,      GPIO_POWER_N_AF,      KEYCODE_ENDCALL, 1},
drivers/input/keyboard/s3c-keypad-board.h:	{IRQ_EINT(5),  GPIO_POWER_N,      GPIO_POWER_N_AF,      KEYCODE_ENDCALL, 1},
drivers/input/keyboard/s3c-keypad-board.h:	{IRQ_EINT(17), GPIO_HOLD_KEY_N,   GPIO_HOLD_KEY_N_AF,   KEYCODE_HOLDKEY, 1},
drivers/input/touchscreen/qt5480-SINGLE-2.c:#define IRQ_TOUCH_INT IRQ_EINT(20)
drivers/input/touchscreen/qt5480-SINGLE-1.c:#define IRQ_TOUCH_INT IRQ_EINT(20)
drivers/input/touchscreen/qt5480.c:#define IRQ_TOUCH_INT           IRQ_EINT(20)
drivers/input/touchscreen/melfas_r880_ts.c://#define IRQ_TOUCH_INT IRQ_EINT(8)
drivers/input/touchscreen/melfas_r880_ts.c:#define IRQ_TOUCH_INT IRQ_EINT(20)
drivers/mmc/host/sdhci.c:	eint_num = irq - IRQ_EINT(0);
include/linux/serial_max3100.h: *  .irq		= IRQ_EINT12,
